#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jun 16, 2021 08:43:06 PM CEST  platform: Windows NT
import sys
import socket
import scapy.all as scapy
import argparse
import portScan
import re
import os
import time
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
from tkinter import *
from tkinter import messagebox #vím, že je to blbost když mam hned nad tím import všeho ale bez specificky vyjmenovaného mi nefungoval messagebox...
import basicWindowPAGE_support
from tkhtmlview import HTMLLabel
    
def oAplikaci():
    messagebox.showinfo("O Aplikaci...", "@Lukáš Svoboda, 2021")

def navod():  
    top2 = Toplevel() 
    top2.title("Návod")
    top2.geometry("650x400")
    
    nutnohtml = HTMLLabel(top2, html="""
    <a href='https://nmap.org/npcap/'>https://nmap.org/npcap/</a> <br>
    <a href='https://nmap.org/npcap/dist/npcap-1.31.exe'>https://nmap.org/npcap/dist/npcap-1.31.exe</a> 
    """)
    nutno = Label(top2, text = "Pro správnou funkčnost prohledání místní sítě je nutné mít nainstalovaný WinPcap.\n Ke stažení jej najdete dole na této stránce.")
    qs = Label(top2, text = "Hledej v síti - prohledá aktuální síť počítače, automaticky dodá masku /24")
    ps = Label(top2, text = "Port Scan - prohledá otevřené porty na zadané IP adrese nebo hostname. \n Po vyhledání IP můžete z levého seznamu také vybrat jednu, kterou chcete proskenovat a kliknout na tlačítko Port Scan. \n Automaticky se začnou prohledávat dobře známé otevřené porty.")
    # Create exit button.
    button = Button(top2, text = "Exit", command = top2.destroy)
    nutno.pack(pady=2)
    qs.pack(pady=2)
    ps.pack(pady=2)
    button.pack(pady=2)
    nutnohtml.pack()
    top2.mainloop()

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    basicWindowPAGE_support.init(root, top)
    hlavniMenu = Menu(root)

    # vytvořit rozbalovací menu a přidat ho k hlavnímu menu
    menuSoubor = Menu(hlavniMenu, tearoff=0)
    menuSoubor.add_command(label="Ukončit", command=root.quit)
    hlavniMenu.add_cascade(label="Soubor", menu=menuSoubor)

    menuNapoveda = Menu(hlavniMenu, tearoff=0)
    menuNapoveda.add_command(label="Návod", command=navod)
    menuNapoveda.add_command(label="O aplikaci...", command=oAplikaci)    
    hlavniMenu.add_cascade(label="Nápověda", menu=menuNapoveda)

    # zobrazení menu
    root.config(menu=hlavniMenu)
    
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    basicWindowPAGE_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

def scan(ip):
    # Creating arp request...
    arp_request = scapy.ARP(pdst=ip)

    # Creating ethernet frame for setting destination MAC....
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")

    # Combining both packets...
    arp_request_broadcast = broadcast / arp_request

    # Sending and receiving requests...
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    client_list = []
    # Iterating in the list...
    for element in answered_list:
        # Storing IP address and MAC Address...
        client_dict = {'IP': element[1].psrc, 'MAC': element[1].hwsrc}
        client_list.append(client_dict)

    return client_list

class Toplevel1:    
    def QuickSearchMethod(self):
        self.ListBoxIPs.delete(0,'end')
        if(self.InputIP.get() == ''):
            ip = get_ip()
            ip = ip+"/24"
            self.InputIP.insert(0, ip)
        else:
            ip = self.InputIP.get()
        listOfIPs = scan(ip)
        for item in listOfIPs:
            strToInsert = "IP:{0:30} MAC:{1}".format(item['IP'], item['MAC'])            
            self.ListBoxIPs.insert(0, strToInsert)       
    
    def selected_item_IP(self):
        for i in self.ListBoxIPs.curselection():
            return self.ListBoxIPs.get(i)  

    def getSelectedIP(self):
        strZMetody = Toplevel1.selected_item_IP(self)
        if (strZMetody == None):
            return ''
        strIP = strZMetody[0:strZMetody.find('MAC')]
        posledniOktet = re.findall(r'\d+', strIP)[-1]
        pozicePosledniOktet = strIP.rfind(posledniOktet)
        strCistaIP = strIP[3:pozicePosledniOktet+len(posledniOktet)]
        return strCistaIP
    
    def QuickPortScanMethod(self):
        original_stdout = sys.stdout        
        f = open('VypisPortu.txt', 'w')
        sys.stdout = f
        try:
            if self.InputPorty.get() == '' and self.InputPortyRangeLow.get() == '' and self.InputPortyRangeHigh.get() == '':
                self.InputPortyRangeLow.insert(0, '1')
                self.InputPortyRangeHigh.insert(0, '1023')
                self.InputPorty.insert(0, self.getSelectedIP())
            if (self.InputPorty.get() != self.getSelectedIP() and self.getSelectedIP() != ''):
                self.InputPorty.delete(0,'end')
                self.InputPorty.insert(0, self.getSelectedIP())
            if (self.InputPorty.get() != '' and self.InputPortyRangeLow.get() == '' and self.InputPortyRangeHigh.get() == ''):
                self.InputPortyRangeLow.insert(0, '1')
                self.InputPortyRangeHigh.insert(0, '1023')
            if (self.InputPortyRangeLow.get() != '' and self.InputPortyRangeHigh.get() == ''):
                portScan.checkSpecificPort(int(self.InputPortyRangeLow.get()), self.InputPorty.get())
            else:
                portScan.checkRange(int(self.InputPortyRangeLow.get()),int(self.InputPortyRangeHigh.get()),self.InputPorty.get())
        except ValueError:
            messagebox.showwarning(title="Chyba!", message="Chyba v zadání, prosím zkontrolujte, zda v rozsahu portů máte pouze čísla.")
        self.ListBoxPorts.delete(0,'end')
        time.sleep(1) # v zásadě zajišťuje vyčištění bufferu, měl jsem problémy, že se občas něco psalo do konzole místo do souboru, protože soubor už byl zavřený (nejspíše kvůli tomu multithreadingu)
        f.close()
        sys.stdout = original_stdout
        with open("VypisPortu.txt", "r") as a_file:
            for line in a_file:
                self.ListBoxPorts.insert(0, line)
        if os.path.exists("VypisPortu.txt"):
            os.remove("VypisPortu.txt")
    
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1500x700+100+100")
        top.minsize(1120, 620)
        top.maxsize(2560, 1440)
        top.resizable(1,  1)
        top.title("Prohledávač sítě")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.ListBoxIPs = tk.Listbox(top)
        self.ListBoxIPs.place(relx=0.017, rely=0.089, relheight=0.8, relwidth=0.4)
        self.ListBoxIPs.configure(background="white")
        self.ListBoxIPs.configure(disabledforeground="#a3a3a3")
        self.ListBoxIPs.configure(font="TkFixedFont")
        self.ListBoxIPs.configure(foreground="#000000")
        self.ListBoxIPs.configure(highlightbackground="#d9d9d9")
        self.ListBoxIPs.configure(highlightcolor="black")
        self.ListBoxIPs.configure(selectbackground="blue")
        self.ListBoxIPs.configure(selectforeground="white")
        
        self.ListBoxPorts = tk.Listbox(top)
        self.ListBoxPorts.place(relx=0.55, rely=0.089, relheight=0.8, relwidth=0.4)
        self.ListBoxPorts.configure(background="white")
        self.ListBoxPorts.configure(disabledforeground="#a3a3a3")
        self.ListBoxPorts.configure(font="TkFixedFont")
        self.ListBoxPorts.configure(foreground="#000000")
        self.ListBoxPorts.configure(highlightbackground="#d9d9d9")
        self.ListBoxPorts.configure(highlightcolor="black")
        self.ListBoxPorts.configure(selectbackground="blue")
        self.ListBoxPorts.configure(selectforeground="white")

        self.QuickSearch = tk.Button(top)
        self.QuickSearch.place(relx=0.033, rely=0.022, height=24, width=95)
        self.QuickSearch.configure(activebackground="#ececec")
        self.QuickSearch.configure(activeforeground="#000000")
        self.QuickSearch.configure(background="#d9d9d9")
        self.QuickSearch.configure(disabledforeground="#a3a3a3")
        self.QuickSearch.configure(foreground="#000000")
        self.QuickSearch.configure(highlightbackground="#d9d9d9")
        self.QuickSearch.configure(highlightcolor="black")
        self.QuickSearch.configure(pady="0")
        self.QuickSearch.configure(text='''Hledej v síti''')
        self.QuickSearch.configure(command=self.QuickSearchMethod)
        
        self.InputIP = tk.Entry(top)
        self.InputIP.place(relx=0.17, rely=0.022, height=24, width=120)
        
        self.LabelIP = tk.Label(top)
        self.LabelIP.place(relx=0.1, rely=0.022, height=24, width=100)
        self.LabelIP.configure(activebackground="#ececec")
        self.LabelIP.configure(activeforeground="#000000")
        self.LabelIP.configure(background="#d9d9d9")
        self.LabelIP.configure(disabledforeground="#a3a3a3")
        self.LabelIP.configure(foreground="#000000")
        self.LabelIP.configure(highlightbackground="#d9d9d9")
        self.LabelIP.configure(highlightcolor="black")
        self.LabelIP.configure(text="Vyhledávám v: ")
        
        self.LabelNavodIP = tk.Label(top)
        self.LabelNavodIP.place(relx=0.15, rely=0.055, height=24, width=200)
        self.LabelNavodIP.configure(activebackground="#ececec")
        self.LabelNavodIP.configure(activeforeground="#000000")
        self.LabelNavodIP.configure(background="#d9d9d9")
        self.LabelNavodIP.configure(disabledforeground="#a3a3a3")
        self.LabelNavodIP.configure(foreground="#a2a2a2")
        self.LabelNavodIP.configure(highlightbackground="#d9d9d9")
        self.LabelNavodIP.configure(highlightcolor="black")
        self.LabelNavodIP.configure(text="Síť ve tvaru např. 192.168.0.0/24")
        
        #porty
        self.QuickPortScan = tk.Button(top)
        self.QuickPortScan.place(relx=0.55, rely=0.022, height=24, width=95)
        self.QuickPortScan.configure(activebackground="#ececec")
        self.QuickPortScan.configure(activeforeground="#000000")
        self.QuickPortScan.configure(background="#d9d9d9")
        self.QuickPortScan.configure(disabledforeground="#a3a3a3")
        self.QuickPortScan.configure(foreground="#000000")
        self.QuickPortScan.configure(highlightbackground="#d9d9d9")
        self.QuickPortScan.configure(highlightcolor="black")
        self.QuickPortScan.configure(pady="0")
        self.QuickPortScan.configure(text='''Port Scan''')
        self.QuickPortScan.configure(command=self.QuickPortScanMethod)
        
        self.LabelPorty = tk.Label(top)
        self.LabelPorty.place(relx=0.63, rely=0.022, height=24, width=100)
        self.LabelPorty.configure(activebackground="#ececec")
        self.LabelPorty.configure(activeforeground="#000000")
        self.LabelPorty.configure(background="#d9d9d9")
        self.LabelPorty.configure(disabledforeground="#a3a3a3")
        self.LabelPorty.configure(foreground="#000000")
        self.LabelPorty.configure(highlightbackground="#d9d9d9")
        self.LabelPorty.configure(highlightcolor="black")
        self.LabelPorty.configure(text="Prohledávám IP: ")
        
        self.InputPorty = tk.Entry(top)
        self.InputPorty.place(relx=0.7, rely=0.022, height=24, width=90)
        
        self.LabelNavodPortIP = tk.Label(top)
        self.LabelNavodPortIP.place(relx=0.6, rely=0.055, height=24, width=300)
        self.LabelNavodPortIP.configure(activebackground="#ececec")
        self.LabelNavodPortIP.configure(activeforeground="#000000")
        self.LabelNavodPortIP.configure(background="#d9d9d9")
        self.LabelNavodPortIP.configure(disabledforeground="#a3a3a3")
        self.LabelNavodPortIP.configure(foreground="#a2a2a2")
        self.LabelNavodPortIP.configure(highlightbackground="#d9d9d9")
        self.LabelNavodPortIP.configure(highlightcolor="black")
        self.LabelNavodPortIP.configure(text="IP/Hostname k prohledání (192.168.0.1/seznam.cz)")
        
        self.LabelPortyRange = tk.Label(top)
        self.LabelPortyRange.place(relx=0.75, rely=0.022, height=24, width=75)
        self.LabelPortyRange.configure(activebackground="#ececec")
        self.LabelPortyRange.configure(activeforeground="#000000")
        self.LabelPortyRange.configure(background="#d9d9d9")
        self.LabelPortyRange.configure(disabledforeground="#a3a3a3")
        self.LabelPortyRange.configure(foreground="#000000")
        self.LabelPortyRange.configure(highlightbackground="#d9d9d9")
        self.LabelPortyRange.configure(highlightcolor="black")
        self.LabelPortyRange.configure(text="V rozsahu:")
        
        self.InputPortyRangeLow = tk.Entry(top)
        self.InputPortyRangeLow.place(relx=0.81, rely=0.022, height=24, width=60)
        
        self.InputPortyRangeHigh = tk.Entry(top)
        self.InputPortyRangeHigh.place(relx=0.86, rely=0.022, height=24, width=60)
        
        self.LabelNavodPortPort = tk.Label(top)
        self.LabelNavodPortPort.place(relx=0.8, rely=0.055, height=24, width=300)
        self.LabelNavodPortPort.configure(activebackground="#ececec")
        self.LabelNavodPortPort.configure(activeforeground="#000000")
        self.LabelNavodPortPort.configure(background="#d9d9d9")
        self.LabelNavodPortPort.configure(disabledforeground="#a3a3a3")
        self.LabelNavodPortPort.configure(foreground="#a2a2a2")
        self.LabelNavodPortPort.configure(highlightbackground="#d9d9d9")
        self.LabelNavodPortPort.configure(highlightcolor="black")
        self.LabelNavodPortPort.configure(text="Rozsah portů pro hledání (dobře známé: 1 - 1023)")
    

if __name__ == '__main__':
    vp_start_gui()





